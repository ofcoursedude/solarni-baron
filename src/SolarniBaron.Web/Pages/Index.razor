@page "/"
@using SolarniBaron.Domain.BatteryBox.Models
@using SolarniBaron.Domain
@using SolarniBaron.Web.Components.Charts

@inherits BlazorState.BlazorStateComponent

@if (State.ShouldDisplayLoginBar)
{
    <NotConnectedComponent GoToLogin="GoToLogin" RefreshPage="RefreshPage"/>
}

@*<Chart Id="pie1" Type="@Chart.ChartType.Pie"
       Data="@(new[] { "1", "2" })"
       BackgroundColor="@(new[] { "blue","green" })"
       Labels="@(new[] { "Fail","Ok" })">
</Chart>*@

<div class="accordion" id="fve-data">
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading-stats">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-stats" aria-expanded="true" aria-controls="collapse-stats">
                Základní info
            </button>
        </h2>
        <div id="collapse-stats" class="accordion-collapse collapse show" aria-labelledby="heading-stats" data-bs-parent="#fve-data">
            <div class="accordion-body">
                <GeneralSection/>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading-output">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-output" aria-expanded="false" aria-controls="collapse-output">
                Výkon
            </button>
        </h2>
        <div id="collapse-output" class="accordion-collapse collapse" aria-labelledby="heading-output" data-bs-parent="#fve-data">
            <div class="accordion-body">
                <PvOutputSection/>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading-consumption">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-consumption" aria-expanded="false" aria-controls="collapse-consumption">
                Zátěž
            </button>
        </h2>
        <div id="collapse-consumption" class="accordion-collapse collapse" aria-labelledby="heading-consumption" data-bs-parent="#fve-data">
            <div class="accordion-body">
                <HouseLoadSection/>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading-grid">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-grid" aria-expanded="false" aria-controls="collapse-grid">
                Síť
            </button>
        </h2>
        <div id="collapse-grid" class="accordion-collapse collapse" aria-labelledby="heading-grid" data-bs-parent="#fve-data">
            <div class="accordion-body">
                <AcGridSection/>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading-actions">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-actions" aria-expanded="false" aria-controls="collapse-actions">
                Akce
            </button>
        </h2>
        <div id="collapse-actions" class="accordion-collapse collapse" aria-labelledby="heading-actions" data-bs-parent="#fve-data">
            <div class="accordion-body">
                <button class="btn btn-outline-primary" style="margin-left: fill" @onclick="Logout">Odhlásit</button>
            </div>
        </div>
    </div>
</div>

<div class="progress" style="@(State.IsBackgroundSyncing ? "" : "display: none")">
    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
</div>


@code {

    private AppState State => GetState<AppState>();

    [Inject]
    IActionDispatcherService ActionDispatcher { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Inject]
    IStorage Storage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cachedStats = await Storage.GetItem<BatteryBoxStatus>("status");
            if (cachedStats != null)
            {
                await ActionDispatcher.DispatchAction(new AppState.SetBatteryBoxStatusAction(cachedStats));
            }
        }
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }

    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, true);
    }

    private async Task Logout()
    {
        await Storage.RemoveItem("loginInfo");
        GoToLogin();
    }

}